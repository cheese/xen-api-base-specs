From 7df93e51d0a587634f461d2f9d85bd4138f1aaf4 Mon Sep 17 00:00:00 2001
From: Christian Lindig <christian.lindig@citrix.com>
Date: Fri, 24 Jun 2016 12:10:18 +0100
Subject: [PATCH] CA-212154 retry if lseek(2) doesn't support SEEK_DATA,
 SEEK_HOLE

This commit adds support for file systems that don't support lseek(..,
SEEK_HOLE) and lseek(,,,, SEEK_DATA). It corrects a bug that was
introduced with CP-210015.

Signed-off-by: Christian Lindig <christian.lindig@citrix.com>
---
 lib/lseek64_stubs.c | 7 +++++++
 1 file changed, 7 insertions(+)

diff --git a/lib/lseek64_stubs.c b/lib/lseek64_stubs.c
index ab7e35b..4c3c09b 100644
--- a/lib/lseek64_stubs.c
+++ b/lib/lseek64_stubs.c
@@ -17,6 +17,7 @@
 #include <sys/types.h>
 #include <sys/stat.h>
 #include <sys/ioctl.h>
+#include <errno.h>
 
 #include <fcntl.h>
 #include <string.h>
@@ -48,6 +49,9 @@ CAMLprim value stub_lseek64_data(value fd, value ofs) {
   caml_enter_blocking_section();
 #if defined(SEEK_DATA)
   c_ret = lseek(c_fd, c_ofs, SEEK_DATA);
+  /* retry, if SEEK_DATA not supported on this file system */
+  if (c_ret == -1 && errno == EINVAL)
+    c_ret = lseek(c_fd, c_ofs, SEEK_SET);
 #else
   /* Set the file pointer to ofs; pretend there is data */
   c_ret = lseek(c_fd, c_ofs, SEEK_SET);
@@ -69,6 +73,9 @@ CAMLprim value stub_lseek64_hole(value fd, value ofs) {
   caml_enter_blocking_section();
 #if defined(SEEK_HOLE)
   c_ret = lseek(c_fd, c_ofs, SEEK_HOLE);
+  /* retry, if SEEK_HOLE not supported on this file system */
+  if (c_ret == -1 && errno == EINVAL)
+    c_ret = lseek(c_fd, 0, SEEK_END);
 #else
   /* Set the file pointer to the end of the file; pretend
      there is no hole */
-- 
2.8.1

